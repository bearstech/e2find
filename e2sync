#!/usr/bin/env perl

# e2sync - ext2/3/4 fast file system sync (relies on e2find+rsync)
# Copyright (C) 2015 Bearstech
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use Getopt::Long qw/:config no_ignore_case no_auto_abbrev/;
use IO::Select;

my $program_version = 0.4;

my $opt_debug = 0;
my $opt_dryrun = 0;
my $opt_verbose = 0;
my $opt_timeout = 300;
my $opt_src_find = 0;
my $opt_dst_find = 0;


sub err {
  my $ret = shift;
  print STDERR @_, "\n" if @_;
  exit($ret);
}

sub dbg {
  print STDERR "++ ", @_, "\n" if $opt_debug;
}

sub show_help {
  print <<EOF;
Usage :
  e2sync [-h|--help] [--version] [-n|--dry-run] [-v|--verbose] [-d|--debug] [--source-find] [--dest-find] /src /dest
  e2sync [...] remote:/src /dest
  e2sync [...] /src remote:/dest

Options : 
  FIXME
  /src and /dst must be ext2/3/4 mountpoints
EOF
}

sub show_version {
  print "e2sync $program_version\n";
}


GetOptions(
  'h|help'    => sub { show_help(); exit(0) },
  'version'   => sub { show_version(); exit(0) },
  'n|dry-run' => \$opt_dryrun,
  'd|debug'   => \$opt_debug,
  'v|verbose' => \$opt_verbose,
  'source-find' => \$opt_src_find,
  'dest-find'   => \$opt_dst_find,
) || exit(1);

err(2, 'expecting two arguments : source and destination') if @ARGV != 2;
my ($src_arg, $dst_arg) = @ARGV;

# Remove trailing(s) /, we expect and check that they paths are folders.
$src_arg =~ s:/+$::;
$dst_arg =~ s:/+$::;

sub get_cmd_e2find {
  my $arg = shift;

  # e2find-based: generates output like (parsed in hash_path) :
  #   1441461259 1441461259 /
  #   1411474532 1411474532 /foo
  my @cmd = qw/e2find --show-mtime --show-ctime -0 --mountpoint/;
  push(@cmd, '--debug') if $opt_debug;
  $arg =~ /(.*):(.*)/ ? ('ssh', $1, @cmd, $2) : (@cmd, $arg);
}

sub get_cmd_find {
  my $arg = shift;

  # find-based: generates output like (parsed in hash_path) :
  #   1441461259.0000000000 1441461259.0000000000 /
  #   1411474532.0000000000 1411474532.0000000000 /foo
  my @opt = ('-printf', '%T@ %C@ /%P\0');
  $arg =~ /(.*):(.*)/ ? ('ssh', $1, 'find', $2, @opt) : ('find', $arg, @opt);
}

$/ = "\0";
my @src_cmd = $opt_src_find ? get_cmd_find($src_arg) : get_cmd_e2find($src_arg);
my @dst_cmd = $opt_dst_find ? get_cmd_find($dst_arg) : get_cmd_e2find($dst_arg);
dbg("src: running: @src_cmd");
dbg("dst: running: @dst_cmd");
open(my $src_fh, '-|', @src_cmd) or err(3);
open(my $dst_fh, '-|', @dst_cmd) or err(4);

my $io = IO::Select->new;
$io->add($src_fh);
$io->add($dst_fh);

sub hash_path {
  my ($handle, $hash) = @_;
  my $in = <$handle>;
  if (defined $in) {
      chomp $in;
      # Parse a "<mtime> <ctime> <path>" line, where optional fractional part
      # in mtime and ctime are currently ignored */
      err(7, "parse error: '$in'") if not $in =~ /^ *(\d+)(?:\.\d+)? +(\d+)(?:\.\d+)? (.*)/;
      $hash->{$3} = [ 0+$1, 0+$2 ];
  } else {
    # An empty reads denote a normal process ending
    $io->remove($handle);
  }
}

my %src;
my %dst;
while (my @ready = $io->can_read($opt_timeout)) {
  hash_path($src_fh, \%src) if @ready > 1 || $ready[0] == $src_fh;
  hash_path($dst_fh, \%dst) if @ready > 1 || $ready[0] == $dst_fh;
}

close($src_fh) or err(5, "interrupted source scan");
close($dst_fh) or err(6, "interrupted destination scan");

dbg("src : ", (scalar keys %src), " paths");
dbg("dst : ", (scalar keys %dst), " paths");

my %sync;

sub to_sync {
  my ($reason, $path) = @_;

  $sync{$path} = $reason;

  if ($opt_verbose) {
    $path =~ s/[\t\r\n]/+/;
    printf "%s %s\n", $reason, $path;
  }
}

while(my ($path, $stime) = each %src) {
  my $dtime = $dst{$path};
  if (not defined $dtime) {  # In src, not in dst : New file (copy)
    to_sync('N', $path);
  }
  elsif ($stime->[0] > $dtime->[0]) {  # In src and dst, data more recent in src : Update (data+meta)
    to_sync('U', $path);
  }
  elsif ($stime->[1] > $dtime->[1]) {  # In src and dst, meta more recent in src : Modify (meta)
    to_sync('M', $path);
  }
}

while(my ($path, $dtime) = each %dst) {
  my $stime = $src{$path};
  if (not defined $stime) {  # In dst, not in src : Deletes
    to_sync('D', $path);
  }
}
to_sync('U', '/');

# Delete cleanup : necessary optimization, otherwise we generate spurious 'file
# has vanished' errors which would shadow legitimate real errors of the same kind.
while (my ($path, $reason) = each %sync) {
  next if $reason ne 'D';

  my $parent = $path;
  while ($parent =~ s:/[^/]+$::) {
    my $pr = $sync{$parent};
    if (defined $pr && $pr eq 'D') {
      delete $sync{$path};
      dbg("ignoring '$path' deletion because '$parent' is planned for deletion");
      last;
    }
  }
}

dbg("sync: ", (scalar keys %sync), " paths");
if ($opt_debug) {
  dbg(sprintf("%s %s", $sync{$_}, $_)) foreach sort keys %sync;
};

my @rsync = (qw/rsync -a --acls --hard-links --numeric-ids --sparse --delete --delete-missing-args -0 --files-from=-/);
push(@rsync, '--verbose') if $opt_verbose;
push(@rsync, '--dry-run') if $opt_dryrun;
push(@rsync, "$src_arg", "$dst_arg");

dbg("sync: running: @rsync");
open(my $rsync_fh, '|-', @rsync) or err(8);
print $rsync_fh "$_\0" foreach keys %sync;
close($rsync_fh) or err(9, "sync: rsync error $?");
