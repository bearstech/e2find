#!/usr/bin/env perl

# e2sync - ext2/3/4 fast file system sync (relies on rsync+e2find)
# Copyright (C) 2015 Bearstech
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use Getopt::Long qw/:config no_ignore_case no_auto_abbrev/;
use IO::Select;

my $program_version = 0.3;

my $opt_debug = 0;
my $opt_dryrun = 0;
my $opt_verbose = 0;
my $opt_timeout = 300;


sub err {
  my $ret = shift;
  print STDERR @_, "\n" if @_;
  exit($ret);
}

sub dbg {
  print STDERR @_, "\n" if $opt_debug;
}

sub show_help {
  print <<EOF;
Usage :
  e2sync [-h|--help] [--version] [-n|--dry-run] [-v|--verbose] [-d|--debug] /src /dest
  e2sync [...] remote:/src /dest
  e2sync [...] /src remote:/dest

Options : 
  FIXME
EOF
}

sub show_version {
  print "e2sync $program_version\n";
}


GetOptions(
  'h|help'    => sub { show_help(); exit(0) },
  'version'   => sub { show_version(); exit(0) },
  'n|dry-run' => \$opt_dryrun,
  'd|debug'   => \$opt_debug,
  'v|verbose' => \$opt_verbose,
) || exit(1);

err(2, 'expecting two arguments : source and destination') if @ARGV != 2;
my ($src_arg, $dst_arg) = @ARGV;

sub get_cmd {
  my $arg = shift;
  my @cmd = qw/e2find --show-mtime --show-ctime -0 --mountpoint/;
  $arg =~ /(.*):(.*)/ ? ('ssh', $1, @cmd, $2) : (@cmd, $arg);
}

$/ = "\0";
my @src_cmd = get_cmd($src_arg);
my @dst_cmd = get_cmd($dst_arg);
dbg("src: running: @src_cmd");
dbg("dst: running: @dst_cmd");
open(my $src_fh, '-|', @src_cmd) or err(3);
open(my $dst_fh, '-|', @dst_cmd) or err(4);

my $io = IO::Select->new;
$io->add($src_fh);
$io->add($dst_fh);

sub hash_path {
  my ($handle, $hash) = @_;
  my $in = <$handle>;
  if (defined $in) {
      # Parse a "<mtime> <ctime> <path>" line
      err(7, "parse error: '$in'") if not $in =~ /^ *(\d+) +(\d+) (.*)/;
      $hash->{$3} = [ 0+$1, 0+$2 ];
  } else {
    # An empty reads denote a normal process ending
    $io->remove($handle);
  }
}

my %src;
my %dst;
while (my @ready = $io->can_read($opt_timeout)) {
  hash_path($src_fh, \%src) if @ready > 1 || $ready[0] == $src_fh;
  hash_path($dst_fh, \%dst) if @ready > 1 || $ready[0] == $dst_fh;
}

close($src_fh) or err(5, "interrupted source scan");
close($dst_fh) or err(6, "interrupted destination scan");

my @sync;

sub to_sync {
  my ($reason, $path) = @_;
  push(@sync, $path);
  if ($opt_verbose) {
    $path =~ s/[\t\r\n]/+/;
    print "$reason $path\n";
  }
}

while(my ($path, $stime) = each %src) {
  my $dtime = $dst{$path};
  if (not defined $dtime) {  # In src, not in dst : New file (copy)
    to_sync('N', $path);
  }
  elsif ($stime->[0] > $dtime->[0]) {  # In src and dst, data more recent in src : Update (data+meta)
    to_sync('U', $path);
  }
  elsif ($stime->[1] > $dtime->[1]) {  # In src and dst, meta more recent in src : Modify (meta)
    to_sync('M', $path);
  }
}

while(my ($path, $dtime) = each %dst) {
  my $stime = $src{$path};
  if (not defined $stime) {  # In dst, not in src : Deleted
    to_sync('D', $path);
  }
}

dbg("src : ", (scalar keys %src), " paths");
dbg("dst : ", (scalar keys %dst), " paths");
dbg("sync: ", (scalar @sync), " paths");

my @rsync = (qw/rsync -a --acls --hard-links --numeric-ids --sparse --delete --delete-missing-args -0 --files-from=-/);
push(@rsync, '--verbose') if $opt_verbose;
push(@rsync, '--dry-run') if $opt_dryrun;
push(@rsync, $src_arg, $dst_arg);

dbg("sync: running: @rsync");
open(my $rsync_fh, '|-', @rsync) or err(8);
print $rsync_fh "$_\0" foreach @sync;
close($rsync_fh) or err(9, "rsync error: $?");

# TODO : add 'e2find --mountpoint' which fails if path is not a mountpoint, will guarantee that args are really basedir for names generated by e2find (simply test if stat.inode == 2)
# TODO : make sure both $src_arg and $dst_arg use the same convention (trailing / or not)
