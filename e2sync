#!/usr/bin/env perl

# e2sync - ext2/3/4 fast file system sync (relies on e2find+rsync)
# Copyright (C) 2015 Bearstech
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use Getopt::Long qw/:config no_ignore_case no_auto_abbrev/;
use IO::Select;

my $program_version = "0.6";

my $opt_debug = 0;
my $opt_dryrun = 0;
my $opt_verbose = 0;
my $opt_timeout = 7200;
my $opt_ssh;
my $opt_src_find = 0;
my $opt_dst_find = 0;


sub err {
  my $ret = shift;
  print STDERR @_, "\n" if @_;
  exit($ret);
}

sub dbg {
  print STDERR "++ ", @_, "\n" if $opt_debug;
}

sub show_help {
  print <<EOF;
Usage :
  e2sync [-h|--help] [--version] [-n|--dry-run] [-v|--verbose] [-d|--debug] [--source-find] [--dest-find] [-e|--ssh ssh] /src /dest
  e2sync [...] remote:/src /dest
  e2sync [...] /src remote:/dest

Options : 
  FIXME
  /src and /dst must be ext2/3/4 mountpoints
EOF
}

sub show_version {
  print "e2sync $program_version\n";
}


GetOptions(
  'h|help'    => sub { show_help(); exit(0) },
  'version'   => sub { show_version(); exit(0) },
  'n|dry-run' => \$opt_dryrun,
  'd|debug'   => \$opt_debug,
  'v|verbose' => \$opt_verbose,
  'e|ssh=s'   => \$opt_ssh,
  'source-find' => \$opt_src_find,
  'dest-find'   => \$opt_dst_find,
) || exit(1);

err(2, 'expecting two arguments : source and destination') if @ARGV != 2;
my ($src_arg, $dst_arg) = @ARGV;

# Prepare a parsed/splitted arg list for system()
my @ssh_args = split(/\s+/, defined $opt_ssh ? $opt_ssh : 'ssh');

# Remove trailing(s) /, we expect and check that they paths are folders.
$src_arg =~ s:/+$::;
$dst_arg =~ s:/+$::;

sub get_cmd_e2find {
  my $arg = shift;

  # e2find-based: generates output like (parsed in hash_path) :
  #   1441461259 1441461259 /
  #   1411474532 1411474532 /foo
  my @cmd = qw/e2find --show-mtime --show-ctime -0 --mountpoint/;
  push(@cmd, '--debug') if $opt_debug;
  $arg =~ /(.*):(.*)/ ? (@ssh_args, $1, @cmd, $2) : (@cmd, $arg);
}

sub get_cmd_find {
  my $arg = shift;

  # find-based: generates output like (parsed in hash_path) :
  #   1441461259.0000000000 1441461259.0000000000 /
  #   1411474532.0000000000 1411474532.0000000000 /foo
  my @opt = ('-printf', '%T@ %C@ /%P\0');
  $arg =~ /(.*):(.*)/ ? (@ssh_args, $1, 'find', $2, @opt) : ('find', $arg, @opt);
}

$/ = "\0";
my @src_cmd = $opt_src_find ? get_cmd_find($src_arg) : get_cmd_e2find($src_arg);
my @dst_cmd = $opt_dst_find ? get_cmd_find($dst_arg) : get_cmd_e2find($dst_arg);
dbg("src: running: @src_cmd");
dbg("dst: running: @dst_cmd");
open(my $src_fh, '-|', @src_cmd) or err(3);
open(my $dst_fh, '-|', @dst_cmd) or err(4);

my $io = IO::Select->new;
$io->add($src_fh);
$io->add($dst_fh);

# %files: hashes {path} to packed(src_mtime, src_ctime, dst_mtime, dst_ctime)
#
#   This data structure must be memory-optimized, it needs to store within a
#   reasonnable amount of memory up to 100 million paths. Packing 4 epochs as
#   16 bytes (actually the full boxed var uses 50 bytes) seems to be the
#   simplest and most efficient Perlish way for now.
#
my %files;

while (my @ready = $io->can_read($opt_timeout)) {
  # Hashing paths from local or remote ends is pretty much the same thing,
  # that's why we run the same loop for any ready filehandle. The only
  # difference is that we stuff timedata at different offsets in the packed
  # value.
  foreach my $fh (@ready) {
    my $in = <$fh>;
    if (!defined $in) {
      # An empty reads denote a normal process ending
      $io->remove($fh);
      next;
    }

    # Parse a "<mtime> <ctime> <path>" line, where optional fractional part
    # in mtime and ctime are currently ignored */
    chomp $in;
    err(7, "parse error: '$in'") if not $in =~ /^ *(\d+)(?:\.\d+)? +(\d+)(?:\.\d+)? (.*)/o;
    my ($mtime, $ctime, $path) = ($1, $2, $3);

    # Create or update value for this path entry
    my @v;
    my $packed = $files{$path};
    if (defined $packed) {
      @v = unpack "LLLL", $packed;
    } else {
      @v = (0, 0, 0, 0);
    }
    if ($fh == $src_fh) {
      $v[0] = 0 + $mtime;
      $v[1] = 0 + $ctime;
    } else {
      $v[2] = 0 + $mtime;
      $v[3] = 0 + $ctime;
    }
    $files{$path} = pack "LLLL", @v;
  }
}

close($src_fh) or err(5, "interrupted source scan (!='$!' ?=$?)");
close($dst_fh) or err(6, "interrupted destination scan (!='$!' ?=$?)");
dbg("hashed: ", scalar keys(%files), " paths");

my %deleted;

while(my ($path, $packed) = each %files) {
  my $reason;
  my ($src_mtime, $src_ctime, $dst_mtime, $dst_ctime) = unpack "LLLL", $packed;

  # Note that entries with (0,0,0,0) cannot exist by design

  if ($src_mtime == 0) {             # In dst, not in src : Deleted (remove dst)
    $deleted{$path} = 1;
    $reason = 'D';
  }
  elsif ($dst_mtime == 0) {          # In src, not in dst : New file (copy)
    $reason = 'N';
  }
  elsif ($src_mtime > $dst_mtime) {  # In src and dst, data more recent in src : Update (data+meta)
    $reason = 'U';
  }
  elsif ($src_ctime > $dst_ctime) {  # In src and dst, meta more recent in src : Modify (meta)
    $reason = 'M';
  }
  else {                             # Nothing to do, up-to-date
    delete $files{$path};
    next;
  }

  if ($opt_verbose) {
    $path =~ s/[\t\r\n]/+/;
    printf "%s %s\n", $reason, $path;
  }
}
# Make sure root is included in sync list, needed by rsync. Value is ignored.
$files{'/'} = 1;

# Handling deletes : if /foo and /foo/bar are to be delete, rsync will generate
# a spurious 'file has vanished' errors which will shadow legitimate real
# errors of the same kind. Thus if a deleted path
# is already implied by another deleted path which is its parent, we delete the former.
#
while (my ($path, undef) = each %deleted) {
  my $parent = $path;
  while ($parent =~ s:/[^/]+$::) {
    if (defined $deleted{$parent}) {
      delete $files{$path};
      dbg("ignoring '$path' deletion because '$parent' is planned for deletion");
      last;
    }
  }
}

dbg("to sync: ", (scalar keys %files), " files");

my @rsync = (qw/rsync -a --acls --hard-links --numeric-ids --sparse --delete --delete-missing-args -0 --files-from=-/);
push(@rsync, '--rsh', $opt_ssh) if defined $opt_ssh;
push(@rsync, '--verbose') if $opt_verbose;
push(@rsync, '--dry-run') if $opt_dryrun;
push(@rsync, "$src_arg", "$dst_arg");

dbg("sync: running: @rsync");
open(my $rsync_fh, '|-', @rsync) or err(8);
print $rsync_fh "$_\0" foreach keys %files;
close($rsync_fh) or err(9, "sync: rsync error $?");
